#!/bin/bash

export CP="cp"
export RM="rm -fr"
export MKDIR="mkdir -p"
export LN="ln -s"
export CP="cp -r"
export MV="mv"

export THIS_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd . && pwd )"
export CONTEXTS_DIR="$THIS_SCRIPT_DIR/contexts"
export TOMCAT_DIR="$THIS_SCRIPT_DIR/apache-tomcat-8.5.4"
export OPENGROK_DIR="$THIS_SCRIPT_DIR/opengrok-0.12.1.5"

export GROK=$OPENGROK_DIR/bin/OpenGrok
export PRESERVED_OPTCONF=$THIS_SCRIPT_DIR/tomgrok-default-conf/options.conf

TOMGROK_VERSOIN=0.5
MYNAME=`basename "$0"`

function print_help() {
    cat << EOF
Usage: $MYNAME <command parameters>

This script is a wrapper around the tools opengrok and apache-tomcat. It can provide some simple command to use the opengrok and config.

$MYNAME parameters list:
  create <context>           Create a new context.
  remove <context>           Remove a context.
  list                       List the exists context.
  list <context>             List the projects of specified context.
  list <context> <path>      List the files of specified context and project.
  startup                    Startup the web service.
  shutdown                   Shutdown the web service.
  link <context> <proj-path> Add a link of the project's sources to the context.
  copy <context> <proj-path> Add a copy of the project's sources to the context.
  link-projects <context> <projs-path>
                             Add the links that each all the subdirectory as a project to the context.
  copy-projects <context> <projs-path>
                             Add a copy that each all the subdirectory as a project to the context.
  delete <context> <project> Remove the project of the context.
  index <context>            Generate index data of the context.
  index-all                  Generate index data each all the exists contexts.[Todo]
  port <port>                Set the port of the web service. default is 8080
  version                    Show the current version.
  help                       Print this help.

Example:
1. Create some contexts as webapps:
tomgrok create mysrc1

2. Add some projects:
tomgrok link mysrc1 /path-to-project1
tomgrok link mysrc1 /path-to-project2

3. Generate index data:
tomgrok index mysrc1

4. Start web service:
tomgrok startup

Now you can access this url as default:
http://localhost:8080/mysrc1/xref
EOF
}

function print_versoin() {
    echo $TOMGROK_VERSOIN
}

function OPTCONF {
    echo "$CONTEXTS_DIR/$1/etc/options.conf"
}

function create_context {
    # $CP $OPENGROK_DIR/lib/source.war $TOMCAT_DIR/webapps/$1.war
    unzip $OPENGROK_DIR/lib/source.war -d $TOMCAT_DIR/webapps/$1

    $MKDIR $CONTEXTS_DIR/$1/src
    $MKDIR $CONTEXTS_DIR/$1/data
    $MKDIR $CONTEXTS_DIR/$1/etc

    $CP $PRESERVED_OPTCONF `OPTCONF $1`
}


function remove_context {
    local tar_dir=$1
    local tar_war="${tar_dir}.war"
    $RM $TOMCAT_DIR/webapps/$tar_dir $TOMCAT_DIR/webapps/$tar_war $TOMCAT_DIR/work/Catalina/localhost/$tar_dir
    $RM $CONTEXTS_DIR/$1
}


# absolute path
function abs_path {
    if [ $1 == "." ]; then 
        echo `pwd`
    else
        echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
    fi
}


#######
# Main
#######

case $1 in
    'version')
        print_versoin
        ;;
    'port')
        if [ $# == 1 ]; then
            sed -e '/<Connector port=".*" protocol="HTTP\/1\.1"/!d' \
                -e 's/.*<Connector port="\(.*\)" .*/\1/' \
                $TOMCAT_DIR/conf/server.xml
        else
            if [ ! -f $TOMCAT_DIR/conf/server.xml.orig ]; then
                $CP $TOMCAT_DIR/conf/server.xml $TOMCAT_DIR/conf/server.xml.orig
            fi
            sed "s/<Connector port=\".*\" protocol=\"HTTP\/1\.1\"/<Connector port=\"$2\" protocol=\"HTTP\/1\.1\"/" \
                $TOMCAT_DIR/conf/server.xml > $TOMCAT_DIR/conf/server2.xml && \
                $MV $TOMCAT_DIR/conf/server.xml $TOMCAT_DIR/conf/server.xml.bak && \
                $MV $TOMCAT_DIR/conf/server2.xml $TOMCAT_DIR/conf/server.xml
        fi
        ;;
    'create')
    	create_context $2
    	;;
    'remove')
    	remove_context $2
    	;;
    'list')
        if [ $# == 1 ]; then
            $MKDIR $CONTEXTS_DIR
            ls $CONTEXTS_DIR  # list all contexts
        elif [ $# == 2 ]; then
            ls $CONTEXTS_DIR/$2/src
        elif [ $# == 3 ]; then
            ls $CONTEXTS_DIR/$2/src/$3
        else
            echo wrong arguments
        fi
    	;;
    'startup')
    	if [ ! -d "$TOMCAT_DIR/logs" ]; then
    		mkdir "$TOMCAT_DIR/logs"
    	fi
    	sh $TOMCAT_DIR/bin/startup.sh
    	;;
    'shutdown')
    	sh $TOMCAT_DIR/bin/shutdown.sh
    	;;
    'link')
    	# eg.
    	#  $ tomgrok link haha proj1 (proj1-alias)
    	# equals:
    	#  $ ln -s /xx/yy/.../proj1 /aa/bb/.../contexts/haha/[proj1|proj1-alias]
        if [ $# -eq 3 ]; then
            $LN `abs_path $3` $CONTEXTS_DIR/$2/src/`basename $3`
        elif [ $# -eq 4 ]; then
            $LN `abs_path $3` $CONTEXTS_DIR/$2/src/$4
        else
            echo wrong link arguments
        fi
    	;;
    'copy')
    	# eg.
    	#  $ tomgrok copy haha proj1 (proj1-alias)
    	# equals:
    	#  $ cp -r /xx/yy/.../proj1 /aa/bb/.../contexts/haha/[proj1|proj1-alias]
        if [ $# -eq 3 ]; then
            $CP `abs_path $3` $CONTEXTS_DIR/$2/src/`basename $3`
        elif [ $# -eq 4 ]; then
            $CP `abs_path $3` $CONTEXTS_DIR/$2/src/$4
        else
            echo wrong copy arguments
        fi
    	;;
    'link-projects')
        $RM $CONTEXTS_DIR/$2/src
        if [ $# -eq 3 ]; then
            $LN `abs_path $3` $CONTEXTS_DIR/$2/src
        else
            echo wrong link arguments
        fi
    	;;
    'copy-projects')
        $RM $CONTEXTS_DIR/$2/src
        if [ $# -eq 3 ]; then
            $CP `abs_path $3` $CONTEXTS_DIR/$2/src
        else
            echo wrong copy arguments
        fi
    	;;
    'delete')
        if [ $# == 3 ]; then
    	        $RM $CONTEXTS_DIR/$2/src/`basename $3`
        else
            echo missing parameter
        fi
    	;;
    'index')
        # $2: context name
    	# generate index data
    	OPENGROK_INSTANCE_BASE=$CONTEXTS_DIR/$2 \
    	 OPENGROK_TOMCAT_BASE=$TOMCAT_DIR \
    	 OPENGROK_WEBAPP_CONTEXT=$2 \
         OPENGROK_CONFIGURATION=`OPTCONF $2` \
         OPENGROK_WEBAPP_CFGADDR=none \
         OPENGROK_GENERATE_HISTORY=off \
         IGNORE_PATTERNS="-i .idea -i *.jar -i *.so -i *.iml -i *out/* -i *build/* -i *gradle/*" \
    	 $GROK index

     	# update configuration.xml in container
        conf_pathname=`echo $CONTEXTS_DIR/$2/etc/configuration\.xml | sed 's/\//\\\\\//g'`
    	sed "s/<param-value>.*configuration\.xml<\/param-value>/<param-value>$conf_pathname<\/param-value>/" \
    	 $TOMCAT_DIR/webapps/$2/WEB-INF/web.xml > $TOMCAT_DIR/webapps/$2/WEB-INF/web2.xml && \
    	 $CP $TOMCAT_DIR/webapps/$2/WEB-INF/web.xml $TOMCAT_DIR/webapps/$2/WEB-INF/web.xml.bak && \
    	 $MV $TOMCAT_DIR/webapps/$2/WEB-INF/web2.xml $TOMCAT_DIR/webapps/$2/WEB-INF/web.xml
    	;;
    'index-all')
    	# todo each all contexts to index
    	;;
    *)
    	print_help
    	;;
esac
